# This is a basic workflow to help you get started with Actions
name: CMake Build Matrix

# Controls when the action will run. Triggers the workflow on push
on:
  push:
  pull_request:
  release:
  # tags:
  # - 'v*' # Push events to matching v*, i.e. v1.0, v20.15.10

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    name: ${{ matrix.config.name }}
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - {
            name: "Windows Latest MinGW",
            os: windows-latest,
            artifact: "windows_mingw.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja",
            ffmpeg_path: "C:/Program Files/FFmpeg/",
            static: "OFF"
          }
          - {
            name: "macOS Latest Clang",
            os: macos-latest,
            artifact: "macos_clang.7z",
            build_type: "Release",
            cc: "clang",
            cxx: "clang++",
            archiver: "7za a",
            generators: "Ninja",
            ffmpeg_path: "/Users/runner/work/ffmpeg-static/ffmpeg-static/target/",
            static: "ON"
          }
          - {
            name: "Ubuntu_Latest_GCC",
            os: ubuntu-latest,
            artifact: "ubuntu_gcc.7z",
            build_type: "Release",
            cc: "gcc",
            cxx: "g++",
            archiver: "7z a",
            generators: "Ninja",
            ffmpeg_path: "/home/runner/work/ffmpeg-static/ffmpeg-static/target/",
            static: "OFF"
          }

    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: Print env
        run: |
          echo github.event.action: ${{ github.event.action }}
          echo github.event_name: ${{ github.event_name }}
      - name: Download ffmpeg-static artifact
        if: startsWith(matrix.config.os, 'macos')
        uses: dawidd6/action-download-artifact@v2
        with:
          # Optional, GitHub token, a Personal Access Token with `public_repo` scope if needed
          # Required, if artifact is from a different repo
          # Required, if repo is private a Personal Access Token with `repo` scope is needed
          github_token: ${{secrets.GITHUB_TOKEN}}
          # Required, workflow file name or ID
          workflow: build.yml
          workflow_conclusion: success
          # Optional, will get head commit SHA
          pr: ${{github.event.pull_request.number}}
          # Optional, will use the branch
          branch: master
          name: ${{ matrix.config.artifact }}
          path: ${{ matrix.config.ffmpeg_path }}
          repo: kuruk-mm/ffmpeg-static
          check_artifacts: true
      - name: Install dependencies on windows
        if: startsWith(matrix.config.os, 'windows')
        run: |
          choco install ninja cmake
          choco install ffmpeg-full ffmpeg-shared
          choco install pkgconfiglite
          ninja --version
          cmake --version
      - name: Install dependencies on ubuntu
        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build cmake p7zip-full
          sudo apt-get install -y ffmpeg libavcodec-dev libavdevice-dev libavformat-dev libswscale-dev
          ninja --version
          cmake --version
          gcc --version

      - name: Install dependencies on macOS
        if: startsWith(matrix.config.os, 'macos')
        run: |
          brew install p7zip cmake ninja
          ninja --version
          cmake --version
#      - name: Setup ffmpeg on Ubuntu
#        if: startsWith(matrix.config.name, 'Ubuntu_Latest_GCC')
#        shell: bash
#        run: |
#          cd ${{ matrix.config.ffmpeg_path }}
#          p7zip -d ${{ matrix.config.artifact }}
#          ls -la .
      - name: Setup ffmpeg on Mac
        if: startsWith(matrix.config.os, 'macos')
        shell: bash
        run: |
          cd ${{ matrix.config.ffmpeg_path }}
          7za x ${{ matrix.config.artifact }}
          ls -la .
      - name: Configure
        shell: bash
        run: |
          export PKG_CONFIG_PATH="${{ matrix.config.ffmpeg_path }}lib/pkgconfig"
          mkdir build
          mkdir instdir
          cmake \
            -S . \
            -B . \
            -DCMAKE_BUILD_TYPE=${{ matrix.config.build_type }} \
            -G "${{ matrix.config.generators }}" \
            -DCMAKE_INSTALL_PREFIX:PATH=instdir \
            -DCMAKE_PREFIX_PATH="${{ matrix.config.ffmpeg_path }}" \
            -DSTATIC_LIB=${{ matrix.config.static }}
      - name: Build
        shell: bash
        run: |
          cmake --build . --config ${{ matrix.config.build_type }}

      - name: Install Strip
        shell: bash
        run: |
          cmake --install . --strip

      - name: Pack
        shell: bash
        working-directory: instdir
        run: |
          ls -laR
          ${{ matrix.config.archiver }} ../${{ matrix.config.artifact }} .
      - name: Upload
        uses: actions/upload-artifact@v1
        with:
          path: ${{ matrix.config.artifact }}
          name: ${{ matrix.config.artifact }}

      - name: Upload release asset
        if: github.event_name == 'release' && (github.event.action == 'published' || github.event.action == 'created')
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ github.event.release.upload_url }}
          asset_path: ${{ matrix.config.artifact }}
          asset_name: ${{ matrix.config.artifact }}.zip
          asset_content_type: application/zip
